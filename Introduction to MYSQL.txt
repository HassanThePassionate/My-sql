---------------How to Select Database-------------
USE <Dbname> || use <Dbname>
USE mydb || use mydb


---------------How to Select all Table fields in Database using "*" -------------
1.First Select Database
2.Select table
3.Also use semicolon ; at the end of each statement
USE mydb;
SELECT * FROM customer;


---------------How to Select and filter a specific row using WHERE Clause-------------
USE mydb;
SELECT * 
FROM customer
WHERE customer_id = 5;


---------------How to Select Table and sort using First_name with ORDER BY Clause-------------
USE mydb;
SELECT * 
FROM customer
-- WHERE customer_id = 5  "--" Double Hyphen is used to comment something
ORDER BY first_name;


---------------How to Select a specific fields with field name-------------
SELECT first_name, last_name , points FROM customer;


---------------How to Select a specific fields with field name and calculate something in run time-------------
SELECT first_name, last_name , points, points+10 FROM customer;


---------------Select specific field and calculate something but change calculated name in run time with AS Alias-------------
SELECT first_name, last_name , points, (points+10)*100 AS discount_factor FROM customer;


---------------if you want to add Space in Alias name-------------
SELECT first_name, last_name , points, (points+10)*100 AS 'Discount Factor' FROM customer;


---------------How to select only unique and non duplicate value ---------------
SELECT DISTINCT city FROM customer;
-- Make sure if you use SELECT DISTINCT first_name, city FROM customer it means both first_name and city
must be distinct. It does not mean that only the city column should be distinct.


---------------How to filter with WHERE Clause-------------
SELECT * FROM customer WHERE points>1500; 
-- filter those records whose points are greater than 1500
-- Also you should use these operators >,<,>=,<=,!=, <> 


---------------How to filter string matched record with WHERE Clause-------------
SELECT * FROM customer WHERE city = 'karachi'; 


---------------How to filter those records which does not contain string 'karachi'-------------
SELECT * FROM customer WHERE city != 'karachi'; 
or 
SELECT * FROM customer WHERE city <> 'karachi';


---------------How to filter those records whose birth_date > 2023-08-07-------------
SELECT * FROM customer WHERE birth_date > '2023-08-07';


---------------How to filter those records whose birth_date > 2023-08-07 and Points > 1500------------
-- We use AND operator it return true if both condition meets true
SELECT * FROM customer WHERE birth_date > '2023-08-07' AND points > 1500;


---------------How to filter those records whose birth_date > 2023-08-07 OR Points > 1500------------
-- We use OR operator it return true if at least one  condition meets true
SELECT * FROM customer WHERE birth_date > '2023-08-07' OR points > 1500;


---------------How to filter those records whose birth_date > 2023-08-07 is NOT Greater than ------------
-- We use NOT operator to reverse
SELECT * FROM customer WHERE NOT(birth_date > '2023-08-07' OR points > 1500);


---------------How to filter those records whose birth_date > 2023-08-07 OR Points > 1500 AND city ="kohat"------------
-- We use OR and AND both to add multiple conditions
SELECT * FROM customer WHERE birth_date > '2023-08-07' OR (points > 1500 AND city = 'kohat');


---------------How to select those result whose city is kohat or karachi------------
-- We use IN operator, we can also use OR operator but IN operator is shorter and it works like OR operator 
SELECT * FROM customer WHERE city IN ('karachi','kohat');


---------------How to select those result whose city is not in kohat or karachi------------
-- We use NOT IN operator
SELECT * FROM customer WHERE city NOT IN ('karachi','kohat');


---------------How to select those points >= 1000 and <= 1500------------
-- We use BETWEEN operator, note we can also use >=  <= operators but BETWEEN is shorter
SELECT * FROM customer WHERE points BETWEEN 1000 AND 1500;


---------------How to select those rows that matched with specific string pattern using LIKE operator------------
-- we use WHERE last_name LIKE 's%' it means last_name must be start with s but after s it contain any letters.
SELECT * FROM customer WHERE last_name LIKE 's%';
SELECT * FROM customer WHERE last_name LIKE 'summer%'; //start with summer ends with any letter


-----------change the pattern in LIKE operator-----------
SELECT * FROM customer WHERE last_name LIKE '%s';// start with any  letter but ends with s
SELECT * FROM customer WHERE last_name LIKE '%s%';// start with any  letter and ends with any letter but s letter can be any
where


-----------Use underscore to define how many letters end with that pattern-----------
SELECT * FROM customer WHERE last_name LIKE '_______s'


-----------we can also specify first and last letter and Between letters range with "__"  underscore-----------
SELECT * FROM customer WHERE last_name LIKE 'v______s'


-----------use  REGEXP to use complex string pattern-----------
-- Look we use like operator
SELECT * FROM customer WHERE first_name LIKE '%hr%'
--we can also use REGEXP for more complex string patterns
SELECT * FROM customer WHERE first_name REGEXP 'hr'

-----------first_name must start with hr-----------
SELECT * FROM customer WHERE first_name REGEXP '^ch'


-----------first_name must end with t-----------
SELECT * FROM customer WHERE first_name REGEXP 't$'


-----------we can also use pipe operator | in REGEXP-----------
SELECT * FROM customer WHERE first_name REGEXP '^ch|t$'
--it means first_name must start with ch 
--Or first_name must end with t


-----------we can also specify []-----------
SELECT * FROM customer WHERE first_name REGEXP '[agc]t'
-- first_name will be at, gt, ct anywhere

-----------we can change pattern-----------
SELECT * FROM customer WHERE first_name REGEXP 't[agc]'
-- first_name will be ta, tg, tc anywhere

-----------we can also specify range [a-h]-----------
SELECT * FROM customer WHERE first_name REGEXP '[a-h]t'
-- first_name will be at,bt,ct,dt,et,ft, gt, ht anywhere

-----------How to select those records whone phone no is NULL using "IS NULL" operator -----------
SELECT * FROM customer WHERE phone IS NULL;

-----------How to select and sort data by column name ----------
-- by default every column is sorted according  to primary key column
SELECT * FROM customer ORDER by first_name;

----------We can also sort by multiple columns-----------
SELECT * FROM customer ORDER by first_name, last_name;


----------We can also sort by multiple columns in Descending order-----------
SELECT * FROM customer ORDER by first_name DESC, last_name ASC;


----------How  to Select first 10 records using "LIMIT" Clause-----------
SELECT * FROM customer LIMIT 10;


----------How to skip  first 10 records using "LIMIT" Clause and select 3 records before 10 records----------
--we define offset 10 , 3
SELECT * FROM customer LIMIT 10 , 3;

----------Reterieve Random record with RAND Function----------
-- Please use ORDER By Clause otherwise you got an error
SELECT * FROM orders ORDER BY RAND() LIMIT 1;

----------How to select one table with relationship to another table using "INNER JOIN"----------
-- lets we have orders table in orders table we have customer_id which is a foriegn key to customer table
--  In Orders table we have  orders_id, customer_id, status, comments
-- In Customer table we have customer_id, first_name, last_name, birth_date, phone, address, city and state
-- We want to inner join with orders table and customer table
SELECT * FROM orders INNER JOIN customerON orders.customer_id  = customer.customer_id;


----------We can also achieve "INNER JOIN" with implicit Syntax---------
SELECT * FROM orders o, customers c WHERE o.customer_id  = c.customer_id;



---------How to find only select first_name, city and phone from customer table -----------
SELECT order_id, orders.customer_id first_name, phone, city 
FROM orders 
INNER JOIN customer
ON 
orders.customer_id  = customer.customer_id;


---------We can also use alias in inner join -----------
SELECT order_id, o.customer_id first_name, phone, city 
FROM orders o
INNER JOIN customer c
ON 
o.customer_id  = c.customer_id;


---------We to join tables across Databases -----------
-- suppose we have a Database name inventory
-- In the inventory db we have products table
-- this product table is associated with orders_items 
-- we can easily join using db.table name
select * 
FROM orders_items oi
INNER JOIN inventory.products p
ON
oi.product_id = p.product_id;


---------How to select only selected name, quantity from products table -----------
select oi.product_id, unit_price, name
FROM orders_items oi
INNER JOIN inventory.products p
ON
oi.product_id = p.product_id;

---------How to Select Self join table itself -----------
-- Suppose we have employe table we want to check who is manager in our complany
-- But the best thing is manager is itself an employe of this complany
SELECT *
FROM employees m
JOIN employees e
ON
 e.reports_to = m.employee_id;


---------How to Select Self join table itself -----------
-- only want to check the manager
SELECT 
e.employee_id,
e.first_name,
m.first_name as Manager
FROM employees m
JOIN employees e
ON
 e.reports_to = m.employee_id;


---------How to JOIN multiple tables -----------
-- We have three tables orders, order_status and customer we want to join
SELECT *
FROM orders o
JOIN customer c
ON
o.customer_id = c.customer_id
JOIN order_status os
ON os.status_is = o.status;

---------Lets Extract Beautifully-----------
SELECT 
o.order_id,
o.order_date,
c.first_name,
c.last_name,
os.name AS Status
FROM orders o
JOIN customer c
ON
o.customer_id = c.customer_id
JOIN order_status os
ON os.status_is = o.status;

---------Compound Join-----------
-- we can combine two fields to unique identify row
SELECT * 
FROM orders_items oi
JOIN order_notes oin
ON
oi.order_id = oin.order_id
AND
oi.product_id = oin.product_id;

---------leFT Join-----------
--Left outer join select those records which are not
--like in our example we also select those customers who don't have any order as well as who do
SELECT 
c.customer_id, 
c.first_name, 
o.order_id 
FROM customer c 
LEFT JOIN orders o 
ON c.customer_id = o.customer_id 
ORDER BY c.customer_id 


---------Right Join-----------
--Right outer join select those records which satisfy the condition
--like in our example we only select those customers who have orders
SELECT 
c.customer_id, 
c.first_name, 
o.order_id 
FROM customer c 
LEFT JOIN orders o 
ON c.customer_id = o.customer_id 
ORDER BY c.customer_id 


---------USING Clause-----------
-- USING Clause can replace JOIN complex steps
-- But it can only work when both table have same column name
SELECT 
o.order_id,
c.first_name
FROM orders o 
JOIN customer c
-- ON o.customer_id = c.first_name
USING (customer_id);



---------Cross JOIN-----------
-- combine every record from first table to second table
-- WE combine every record from customer table to products table
SELECT 
c.first_name AS customer,
p.name AS product 
FROM customer c
CROSS JOIN inventory.products p 
ORDER BY c.first_name;


---------Combine tables rows with UNION-----------
SELECT 
order_id,
order_date,
'Active' AS status
FROM orders
WHERE order_date >= '2023-11-09'
UNION
SELECT 
order_id,
order_date,
'Archived' AS status
FROM orders
WHERE order_date < '2023-11-09'


---------INSERT RECORDS-----------
INSERT INTO customer (
    customer_id,
    first_name,
    last_name,
    birth_date,
    phone,
    address,
    city,
    state,
    points
) VALUES (
    52,
    'Ahmed',
    'Raheem',
    NULL,
    NULL,
    'Azad Chaiwala Institute',
    'Rawalpindi',
    'Punjab',
    DEFAULT
);


---------INSERT Multiple RECORDS-----------
INSERT INTO customer (
    customer_id,
    first_name,
    last_name,
    birth_date,
    phone,
    address,
    city,
    state,
    points
) VALUES (
    53,
    'Ishaque',
    'Chaiwala',
    NULL,
    NULL,
    'Azad Chaiwala Institute',
    'Rawalpindi',
    'Sindh',
    DEFAULT
),
(
    54,
    'Muhammad',
    'Mowahid',
    NULL,
    NULL,
    'Azad Chaiwala Institute',
    'Rawalpindi',
    'Punjab',
    DEFAULT
);


---------INSERT Hierarchical RECORDS-----------
INSERT INTO customer(customer_id,first_name,last_name,birth_date)
VALUES (DEFAULT,'IGI','ORIGIN','2023-12-25');

INSERT INTO orders(order_id,order_date, status,c_id)
VALUES(DEFAULT,'2023-12-25',1,LAST_INSERT_ID());

INSERT INTO
orders_items(order_items_id,order_id,product_id,unit_price,quantity)
VALUES (DEFAULT,LAST_INSERT_ID(),9,35,3);


---------Creating Copy of a Table-----------
CREATE TABLE orders_archived  AS
SELECT * FROM orders;



---------Insert only data from one table to another-----------
INSERT INTO orders_archived
SELECT * from orders WHERE order_date > '2023-12-01';


---------Updating Single Record-----------
UPDATE customer 
SET first_name="Muhammad", last_name="Hashim", birth_date="2023-12-30"
WHERE customer_id = 1;

---------Update multiple Records-----------
UPDATE orders_items
SET unit_price=50.57, quantity = 5
WHERE order_id = 1;



---------Using subqueries in Update-----------
UPDATE orders
SET comments = "Gold Customer"
WHERE c_id IN
                (SELECT customer_id
                 FROM customer
                 WHERE points > 1800);



---------Using subqueries in Delete-----------
DELETE FROM orders
WHERE c_id = (
			SELECT customer_id
			FROM customer 
			WHERE first_name = "Delano"
			 );



---------Aggregate Functions-----------
SELECT 
MAX(salary) AS Highest,
MIN(salary) AS lowest,
AVG(salary) AS average,
SUM(salary) AS total,
COUNT(salary) AS number_of_records
FROM employees;


---------The GROUP By Clause in Aggregate Functions-----------
SELECT 
client_id,
SUM(invoice_total) as total_sales
FROM invoices
GROUP BY client_id
ORDER BY total_sales DESC;


---------The GROUP By Clause with WHERE Clause in Aggregate Functions-----------
SELECT 
client_id,
SUM(invoice_total) as total_sales
FROM invoices
WHERE invoice_date >= '2019-07-01'
GROUP BY client_id
ORDER BY total_sales DESC;

---------The GROUP By Clause with inner JOIN in Aggregate Functions-----------
SELECT 
name,
state,
city,
SUM(invoice_total) as total_sales
FROM invoices i
JOIN clients c USING(client_id)
GROUP BY state, city;


---------The GROUP By Clause with inner JOIN in Aggregate Functions-----------
SELECT date,
pm.name,
SUM(amount) AS total_amounts
FROM payments p
JOIN payment_methods pm
ON p.payment_method = pm.payment_method_id
GROUP BY date
ORDER BY date DESC;

---------Having Clause with Aggregate Functions-----------
SELECT 
client_id,
COUNT(*) AS number_of_invoices,
SUM(invoice_total) as total_sales
FROM invoices
GROUP BY client_id
HAVING total_sales > 500;



---------Having Clause with Aggregate Functions-----------
SELECT 
client_id,
COUNT(*) AS number_of_invoices,
SUM(invoice_total) as total_sales
FROM invoices
GROUP BY client_id
HAVING total_sales > 500 AND number_of_invoices > 5;



---------Aggregate functions WITH ROLLUP-----------
SELECT 
client_id,
SUM(invoice_total) as total_sales
FROM invoices
GROUP BY client_id WITH ROLLUP;

---------Aggregate functions WITH ROLLUP and JOIN-----------
SELECT 
state,
city,
SUM(invoice_total) as total_sales
FROM invoices i
JOIN clients c USING(client_id)
GROUP BY state, city WITH ROLLUP;


---------Write more about subqueries-----------
-- find products that are more
-- expensive than lettuce (id = 3)
-- MySQL first execute innersubquery than pass it to out query
SELECT * 
FROM products 
WHERE unit_price > (
SELECT unit_price
FROM products
WHERE product_id = 3
);

---------Write more about subqueries-----------
-- In Sql_hr database
-- find employees who earn more than average 
SELECT * FROM
employees WHERE salary > (
SELECT AVG(salary)
    FROM employees
);

---------Write more about subqueries using IN operator-----------
-- find that product that have never been ordered 
SELECT * FROM products
WHERE product_id NOT IN (
SELECT DISTINCT product_id
FROM order_items
);

---------Write more about subqueries using IN operator-----------
-- find clients without invoices
SELECT * 
FROM clients 
WHERE client_id NOT IN (
SELECT DISTINCT client_id
FROM invoices
);

---------join vs sub query-----------
----------using subqueries-----------
-- find customer who have ordered lettuce
-- select customer_id , first_name, last_name
SELECT customer_id,
first_name,
last_name
FROM customers 
WHERE customer_id IN(
SELECT o.customer_id   
FROM order_items oi
JOIN orders o USING (order_id)
    WHERE product_id = 3
);

----------using JOIN-----------
SELECT DISTINCT customer_id,
first_name,
last_name
FROM customers c 
JOIN orders o USING(customer_id)
JOIN order_items oi USING(order_id)
WHERE oi.product_id = 3;

----------without ALL keyword-----------
-- select invoices larger than all invoices of client 3
SELECT *
FROM invoices 
WHERE invoice_total >(
SELECT MAX(invoice_total)
    FROM invoices
    WHERE client_id = 3 
);

----------ALL keyword-----------
SELECT *
FROM invoices 
WHERE invoice_total > ALL(
SELECT invoice_total
    FROM invoices
    WHERE client_id = 3 
);

----------Correlated subqueries-----------
-- For each employe
-- calculate the avg salary for employee.office
-- return the employee if salary > avg
SELECT * 
FROM employees e 
WHERE salary > (
	SELECT AVG(salary)
    FROM employees 
    WHERE office_id = e.office_id
);


----------The EXISTS operator-----------
-- Select client that have an invoice

-- one method 
Select *
FROM clients
WHERE client_id IN (
    select DISTINCT client_id
    FROM invoices
);
-- second method 
SELECT *
FROM clients
INNER JOIN (
    SELECT DISTINCT client_id
    FROM invoices
) AS distinct_clients
ON clients.client_id = distinct_clients.client_id;

-- third method 
Select *
FROM clients c
WHERE EXISTS (
    select client_id
    FROM invoices
    WHERE client_id = c.client_id
);

----------Date Functions to check dynamically current Year orders-----------
SELECT *
FROM orders
WHERE YEAR(order_date) = YEAR(NOW());

----------FORMAT_DATE Function-----------
SELECT DATE_FORMAT(order_date,'%D %M %Y')
FROM orders;

----------ADDING DATE Function-----------
SELECT DATE_ADD(order_date, INTERVAL 1 YEAR)
FROM orders;

----------IFNULL Function-----------

SELECT 
order_id,
shipper_id
FROM orders;

SELECT 
order_id,
IFNULL(shipper_id,'Not Assigned') AS shipper
FROM orders;

----------COALESCE Function-----------
SELECT 
order_id,
COALESCE(shipper_id,comments,'Not Assigned') AS shipper
FROM orders;

SELECT 
order_id,
IFNULL(shipper_id,'...') AS shipperID,
COALESCE(shipper_id,comments,'Not Assigned') AS shipper
FROM orders;

----------IF Function-----------
SELECT 
    order_id,
    order_date,
    IF(YEAR(order_date) = YEAR(NOW()), 'Active', 'Archived') AS order_status
FROM orders;


----------CASE  Operator-----------
SELECT 
    order_id,
    CASE
    WHEN YEAR(order_date) = YEAR(NOW()) THEN 'Active'
    WHEN YEAR(order_date) = YEAR(NOW()) - 1 THEN 'Last Year'
    WHEN YEAR(order_date) < YEAR(NOW()) - 1 THEN 'Archived'
    ELSE 'Future'
    END AS Category
FROM orders;


----------Practice-----------
SELECT 
CONCAT(first_name,' ',last_name) AS Customer,
points,
CASE
	WHEN points > 3000 THEN 'Gold Customer'
    WHEN points >= 2000 THEN 'Silver Customer'
	ELSE 'Bronze Customer'
    END AS category
FROM customers;

----------Creating View-----------
CREATE VIEW sales_by_client AS 
SELECT 
c.client_id,
c.name,
SUM(invoice_total) AS total_sales
FROM clients c
JOIN invoices i USING(client_id)
GROUP BY client_id, name;

----------Drop View-----------
DROP VIEW invoices_with_balance;

----------Updatable View-----------
-- DISTINCT
-- Aggregate functions (MIN , MAX, SUM) etc
-- GROUP BY / HAVING
-- UNION
-- If we dont have these in mention above
-- than our view is Updatable view

CREATE OR REPLACE VIEW invoices_with_balance AS
	SELECT 
	invoice_id,
	number,
	client_id,
	invoice_total,
	payment_total,
	invoice_total - payment_total AS balance,
	invoice_date,
	payment_date,
	due_date
	FROM invoices
    WHERE (invoice_total-payment_total) > 0;

DELETE FROM invoices_with_balance
WHERE invoice_id = 1;

-- prevent view as only read-only 
-- add WITH check OPTION;

CREATE OR REPLACE VIEW invoices_with_balance AS
	SELECT 
	invoice_id,
	number,
	client_id,
	invoice_total,
	payment_total,
	invoice_total - payment_total AS balance,
	invoice_date,
	payment_date,
	due_date
	FROM invoices
    WHERE (invoice_total-payment_total) > 0
    WITH check OPTION;


----------Creating Store Procedure-----------
DELIMITER $$
CREATE PROCEDURE get_clients()
BEGIN
	SELECT * FROM clients;
END$$
DELIMITER ;

----------Select Procedure-----------
CALL get_clients()

----------Dropping Procedure-----------
DROP Procedure IF EXISTS get_clients;

----------Parameters in Procedure-----------
DROP PROCEDURE IF EXISTS get_clients_by_states;
DELIMITER $$
CREATE PROCEDURE get_clients_by_states()
	(
        state CHAR(2)
    )
	BEGIN
    SELECT * FROM clients c
    WHERE c.state = state;
	END$$
DELIMITER ;


CALL get_clients_by_states('CA');


----------Parameters with defaults values in Procedure-----------
DELIMITER $$
CREATE PROCEDURE get_clients_by_default_states()
	(
        state CHAR(2)
    )
	BEGIN
    IF state IS NULL THEN
        state = 'CA';
    END IF;
    SELECT * FROM clients c
    WHERE c.state = state;
	END$$
DELIMITER ;


CALL get_clients_by_default_states(NULL)


----------Parameters with IF ELSE  in Procedure-----------
DELIMITER $$
CREATE PROCEDURE get_clients_by_default_states()
	(
        state CHAR(2)
    )
	BEGIN
    IF state IS NULL THEN
        select * from clients;
    ELSE
            SELECT * FROM clients c
            WHERE c.state = state;
    END IF;
	END$$
DELIMITER ;


CALL get_clients_by_default_states(NULL)
CALL get_clients_by_default_states('CA')


----------Practice Procedure-----------
-- Write a stored procedure call  get_payments
-- with two Parameters
-- client_id => id(5)
-- payment_method_id => TINYINT(1) 0-255

DELIMITER $$
CREATE PROCEDURE get_payments()
    (
        client_id INT,
        payment_method_id TINYINT(1)
    )
BEGIN
    SELECT * 
    from payments p
    WHERE 
    p.client_id = IFNULL(client_id, p.client_id) AND
    p.payment_method = IFNULL(payment_method_id,p.payment_method);
END
DELIMITER ;


CALL get_payments(NULL,NULL);
CALL get_payments(5,NULL);
CALL get_payments(5,2);
CALL get_payments(NULL,2);


----------Update in  Procedure-----------
DELIMITER $$
CREATE PROCEDURE make_payments()
    (
        invoice_id INT,
        payment_total DECIMAL(8,2),
        payment_date DATE
    )
BEGIN
    UPDATE invoices i
    SET 
    i.payment_total = payment_total,
    i.payment_date = payment_date
    WHERE i.invoice_id = invoice_id;
END$$
DELIMITER ;


CALL make_payments(2,2223.823,'2023-01-07');


----------Update with validation  in  Procedure-----------
-- Error Code link
-- https://www.ibm.com/docs/en/db2-for-zos/11?topic=codes-sqlstate-values-common-error
DELIMITER $$
CREATE PROCEDURE make_validate_payments()
    (
        invoice_id INT,
        payment_total DECIMAL(8,2),
        payment_date DATE
    )
BEGIN
	IF payment_total <= 0 THEN
    	SIGNAL SQLSTATE '22003'
        SET MESSAGE_TEXT = "Invalid Payment Amounts";     
    END IF;
    UPDATE invoices i
    SET 
    i.payment_total = payment_total,
    i.payment_date = payment_date
    WHERE i.invoice_id = invoice_id;
END$$
DELIMITER ;

CALL make_validate_payments(2,-2223.823,'2023-01-07');


----------Output Parameters  in  Procedure-----------
DELIMITER $$
CREATE PROCEDURE get_unpaid_invoices_for_clients()
	(
      client_id INT   
    )
BEGIN
	SELECT COUNT(*) ,
    SUM(invoice_total)
    FROM invoices i
    WHERE i.client_id =  client_id
    	AND payment_total = 0;
END$$
DELIMITER ;

CALL get_unpaid_invoices_for_clients(3);
-- we get this
-----------------------------------
|   COUNT(*)   SUM(invoice_total) |
|   2          286.08             |
-----------------------------------

-- We can also recieves these values through Parameters 2, 286.08
-- we can specific OUT to identify Output Parameters
-- also copy this using INTO

DELIMITER $$
CREATE PROCEDURE get_unpaid_invoices_for_clients()
	(
      client_id INT,
      OUT invoices_count INT,
      OUT invoices_total DECIMAL(9,2)
    )
BEGIN
	SELECT COUNT(*), SUM(invoice_total)
    INTO invoices_count, invoices_total
    FROM invoices i
    WHERE i.client_id =  client_id
    	AND payment_total = 0;
END$$
DELIMITER ;

CALL get_unpaid_invoices_for_clients(3)

-- we get some output Parameters in the form of variables which is hard to read
-- sometime we avoid 
SET @p0='3'; SET @p1=''; SET @p2=''; 
CALL `get_unpaid_invoices_for_clients`(@p0, @p1, @p2); 
SELECT @p1 AS `invoices_count`, @p2 AS `invoices_total`;
-----------------------------------
|   COUNT(*)   SUM(invoice_total) |
|   2          286.08             |
-----------------------------------

----------Local variables  in  Procedure-----------
-- risk_factor = invoices_total / invoices_count * 5
-- these are all local variables
-- we get data from table and pass these data to local variables finally we select
-- local variables will die when procedure were finished
DELIMITER $$
CREATE PROCEDURE get_risk_factor()
BEGIN
	DECLARE risk_factor DECIMAL(9,2) DEFAULT 0;
    DECLARE invoices_total DECIMAL(9,2);
    DECLARE invoices_count INT;
	SELECT COUNT(*), SUM(invoice_total)
    INTO invoices_count, invoices_total
    FROM invoices;
    SET risk_factor = invoices_total / invoices_count * 5;
    SELECT risk_factor;
END$$
DELIMITER ;

CALL get_risk_factor();

----------------
|  risk_factor |
|   777.75     |
----------------


----------Functions-----------
DELIMITER $$
CREATE FUNCTION get_risk_factor_for_client
	(
        client_id INT
	)
RETURNS INTEGER
READS SQL DATA
BEGIN
    DECLARE risk_factor DECIMAL(9,2) DEFAULT 0;
    DECLARE invoices_total DECIMAL(9,2);
    DECLARE invoices_count INT;
    
    SELECT COUNT(*), SUM(invoice_total)
    INTO invoices_count, invoices_total
    FROM invoices i
    WHERE i.client_id = client_id;
    
    SET risk_factor = invoices_total / invoices_count * 5;
    RETURN risk_factor;
END$$
DELIMITER ;

SELECT 
client_id,
name,
get_risk_factor_for_client(client_id)
FROM clients;

---------------------------------------------------------------------------------
|   client_id              name          get_risk_factor_for_client(client_id)  |       
|   1                      Vinte                           803                  |
|   2                      Myworks                         NULL                 |
|   3                      Yadel                           706                  |
|   4                      kwidea                          NULL                 |
|   5                      Topiclounge                     817                  |
---------------------------------------------------------------------------------

DELIMITER $$
CREATE FUNCTION get_risk_factor_for_client
	(
        client_id INT
	)
RETURNS INTEGER
READS SQL DATA
BEGIN
    DECLARE risk_factor DECIMAL(9,2) DEFAULT 0;
    DECLARE invoices_total DECIMAL(9,2);
    DECLARE invoices_count INT;
    
    SELECT COUNT(*), SUM(invoice_total)
    INTO invoices_count, invoices_total
    FROM invoices i
    WHERE i.client_id = client_id;
    
    SET risk_factor = invoices_total / invoices_count * 5;
    RETURN IFNULL(risk_factor,0);
END$$
DELIMITER ;

---------------------------------------------------------------------------------
|   client_id              name          get_risk_factor_for_client(client_id)  |       
|   1                      Vinte                           803                  |
|   2                      Myworks                         0                    |
|   3                      Yadel                           706                  |
|   4                      kwidea                          0                    |
|   5                      Topiclounge                     817                  |
---------------------------------------------------------------------------------

----------Drop Functions-----------
DROP FUNCTION get_unpaid_invoices_for_clients;


----------TRIGGER-----------
----------Update TRIGGER Example-----------
-- A block of code that automatically get executed
-- before or after an insert, Update or Delete statement

DELIMITER $$
CREATE TRIGGER payment_after_insert
	AFTER INSERT ON payments
    FOR EACH ROW
BEGIN
	UPDATE invoices
    SET payment_total = payment_total + NEW.amount
    WHERE invoice_id = NEW.invoice_id;
END $$
DELIMITER ;

INSERT INTO payments 
VALUES (DEFAULT,5,3,'2023-09-01',10,1);

----------Delete TRIGGER Example-----------
DELIMITER $$

CREATE TRIGGER payment_after_delete
AFTER DELETE ON payments
FOR EACH ROW
BEGIN
    UPDATE invoices
    SET payment_total = payment_total - OLD.amount
    WHERE invoice_id = OLD.invoice_id;
END $$
DELIMITER ;

DELETE FROM payments WHERE payment_id = 10;

----------SHOWING TRIGGERS-----------
SHOW TRIGGERS;
SHOW TRIGGERS LIKE 'payments%';

----------DROP TRIGGERS-----------
DROP TRIGGER IF EXISTS payment_after_insert;

----------USING TRIGGERS FOR AUDITING-----------
USE sql_invoicing;

CREATE TABLE payments_audit
(
    client_id   INT           NOT NULL,
    date        DATE          NOT NULL,
    amount      DECIMAL(9, 2) NOT NULL,
    action_type VARCHAR(50)   NOT NULL,
    action_date DATETIME      NOT NULL
);


DROP TRIGGER IF EXISTS payments_after_insert;
DELIMITER $$
CREATE TRIGGER payments_after_insert
    AFTER INSERT ON payments
    FOR EACH ROW
BEGIN
    UPDATE invoices
    SET payment_total = payment_total + NEW.amount
    WHERE invoice_id = NEW.invoice_id;
    
    INSERT INTO payments_audit
    VALUES (NEW.client_id, NEW.date, NEW.amount, 'Insert', NOW());
END $$

DELIMITER ;
DROP TRIGGER IF EXISTS payments_after_delete;
DELIMITER $$
CREATE TRIGGER payments_after_delete
    AFTER DELETE ON payments
    FOR EACH ROW
BEGIN
    UPDATE invoices
    SET payment_total = payment_total - OLD.amount
    WHERE invoice_id = OLD.invoice_id;
    
    INSERT INTO payments_audit
    VALUES (OLD.client_id, OLD.date, OLD.amount, 'Delete', NOW());
END $$

DELIMITER ;


INSERT INTO payments 
VALUES (DEFAULT,5,3,'2023-09-01',10,1);


----------TRANSACTIONS-----------
-- A group of sql statements that
-- represent a Single unit of work
START TRANSACTION;
INSERT INTO orders(customer_id,order_date,status)
VALUES(1,'2024-01-09',1);
INSERT INTO order_items()
VALUES(LAST_INSERT_ID(),1,1,1);
COMMIT;

